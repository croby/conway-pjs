/**
 * Conway's Game of Life
 * While I make no claim to the original algorithm, take any of this code under:
 *
 * The MIT License
 * Copyright (c) 2010 Chris Roby, 70BPM LLC (www.chrisroby.com / www.70bpm.com)
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

int x = 0;
boolean active, highlightNew;
ACell[][] grid;
int cols, rows;
float cellwidth, cellheight;
color black, white, green;

void setup() {
  highlightNew = false;
  size(500,500);
  initGame(500,500,10);
  active = false;
  frameRate(6);
}

void draw() {
  if (active) {
    tick();
  }
  background(255);
  renderGame();
}

void keyPressed() {
  if (key == ' ') {
    active = !active;
  } else if (key == 'c') {
    clear();
  } else if (key == 'g') {
    gliderGun();
  } else if (key == 'h') {
    highlightNew = !highlightNew;
  } 
}

void initGame(int _width, int _height, int _cellsize) {
  cols = _width/_cellsize;
  rows = _height/_cellsize;
  
  cellwidth = _cellsize;
  cellheight = _cellsize;
  
  black = color(0,0,0);
  green = color(0,255,0);
  clear();
}

void tick() {
  for (int i=0; i<cols; i++) {
    for (int j=0; j<rows; j++) {
      grid[i][j].activeNeighbors = getNumActiveNeighbors(i, j);
      
      if (grid[i][j].currState == true && grid[i][j].activeNeighbors < 2) {
        grid[i][j].nextState = false;
      } else if (grid[i][j].currState == true && grid[i][j].activeNeighbors > 3) {
        grid[i][j].nextState = false;
      } else if (grid[i][j].currState == true && grid[i][j].activeNeighbors > 1 && grid[i][j].activeNeighbors < 4) { 
        grid[i][j].nextState = true; 
        grid[i][j].col = black; 
      } else if (grid[i][j].currState == false && grid[i][j].activeNeighbors == 3) { 
        grid[i][j].nextState = true;
        if (highlightNew)
          grid[i][j].col = green;
        else
          grid[i][j].col = black;
      }
    }
  }
  makeNextStateCurrent();
}

void renderGame() {
  for (int i=0; i<cols; i++) {
    for (int j=0; j<rows; j++) {
      strokeWeight(1);
      stroke(120, 120, 120);
      noFill();
      rect(i*cellwidth, j*cellheight, cellwidth, cellheight);
      if (grid[i][j].currState == true) {
        fill(grid[i][j].col);
        rect(i*cellwidth, j*cellheight, cellwidth, cellheight);
        noFill();
      }
    }
  }
}

void clear() {
  grid = new ACell[cols][rows];
  for (int i=0; i<cols; i++) {
    for (int j=0; j<rows; j++) {
      grid[i][j] = new ACell();
      grid[i][j].currState = false;
      grid[i][j].col = black;
    }
  }
}

void mousePressed() {
  int xcell = floor(mouseX/cellwidth);
  int ycell = floor(mouseY/cellheight);

  grid[xcell][ycell].currState = !grid[xcell][ycell].currState;
}

void gliderGun() {
  active = false;
  clear();
  
  // left box
  grid[1][5].currState = true;
  grid[1][6].currState = true;
  grid[2][5].currState = true;
  grid[2][6].currState = true;
  
  // left middle of gun
  grid[11][5].currState = true;
  grid[11][6].currState = true;
  grid[11][7].currState = true;
  grid[12][4].currState = true;  
  grid[12][8].currState = true;
  grid[13][3].currState = true;
  grid[13][9].currState = true;
  grid[14][3].currState = true;
  grid[14][9].currState = true;
  grid[15][6].currState = true;
  grid[16][4].currState = true;
  grid[16][8].currState = true;
  grid[17][5].currState = true;
  grid[17][6].currState = true;
  grid[17][7].currState = true;
  grid[18][6].currState = true;
  
  // right middle of gun
  grid[21][3].currState = true;
  grid[21][4].currState = true;
  grid[21][5].currState = true;
  grid[22][3].currState = true;
  grid[22][4].currState = true;
  grid[22][5].currState = true;
  grid[23][2].currState = true;
  grid[23][6].currState = true; 
  grid[25][1].currState = true;
  grid[25][2].currState = true;
  grid[25][6].currState = true;
  grid[25][7].currState = true;    

  // right block
  grid[35][3].currState = true;
  grid[35][4].currState = true;
  grid[36][3].currState = true;
  grid[36][4].currState = true;  

}

// Now, I know there MUST be a better way to do this one!
int getNumActiveNeighbors(int colIndex, int rowIndex) {
  int ret = 0;
  
  ACell[] neighbors = new ACell[8];
  boolean[] isRealNeighbor = new boolean[8];
  for (int i=0; i<8; i++) {
    isRealNeighbor[i] = false;
  }
  
  //1
  if (rowIndex-1 >= 0 && colIndex-1 >= 0) {
    isRealNeighbor[0] = true;
    neighbors[0] = grid[colIndex-1][rowIndex-1];
  }
  
  //2
  if (rowIndex-1 >= 0) {
    isRealNeighbor[1] = true;   
    neighbors[1] = grid[colIndex][rowIndex-1];
  }
  
  //3
  if (rowIndex-1 >= 0 && colIndex+1 < cols) {
    isRealNeighbor[2] = true;   
    neighbors[2] = grid[colIndex+1][rowIndex-1];
  }
  
  //4
  if (colIndex+1 < cols) {
    isRealNeighbor[3] = true;   
    neighbors[3] = grid[colIndex+1][rowIndex];
  }
  
  //5
  if (colIndex+1 < cols && rowIndex+1 < rows) {
    isRealNeighbor[4] = true;   
    neighbors[4] = grid[colIndex+1][rowIndex+1];
  }
  
  //6
  if (rowIndex+1 < rows) {
    isRealNeighbor[5] = true;   
    neighbors[5] = grid[colIndex][rowIndex+1];
  }
  
  //7
  if (colIndex-1 >= 0 && rowIndex+1 < rows) {
    isRealNeighbor[6] = true;   
    neighbors[6] = grid[colIndex-1][rowIndex+1];
  }
  
  //8
  if (colIndex-1 >= 0) {
    isRealNeighbor[7] = true;   
    neighbors[7] = grid[colIndex-1][rowIndex];
  }

  for (int i=0; i<8; i++) {
    if (isRealNeighbor[i]) {
      if (neighbors[i].currState == true) {
        ret++;
      }
    }
  }
  return ret;
}

void makeNextStateCurrent() {
  for (int i=0; i<cols; i++) {
    for (int j=0; j<rows; j++) {
      grid[i][j].currState = grid[i][j].nextState;    
    }
  }
}

class ACell {
  boolean currState;
  boolean nextState;
  int activeNeighbors;
  color col;
  
  ACell() {
    currState = false;
    nextState = false;
    activeNeighbors = 0;
    col = color(255,255,255);
  }
}